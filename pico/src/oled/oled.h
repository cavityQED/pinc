#ifndef OLED_H
#define OLED_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "pico/stdlib.h"
#include "pico/binary_info.h"
#include "hardware/gpio.h"
#include "hardware/i2c.h"

#define I2C_CMD						0x00
#define NOP							0xE3

#define SET_DISPLAY_ON_YES_RAM		0xA4
#define SET_DISPLAY_ON_NO_RAM		0xA5
#define SET_NORMAL_DISPLAY			0xA6
#define SET_INVERSE_DISPLAY			0xA7
#define SET_DISPLAY_OFF				0xAE
#define SET_DISPLAY_ON				0xAF
#define SET_SEGMENT_NO_REMAP		0xA0
#define SET_SEGMENT_REMAP			0xA1
#define SET_COM_NORMAL_SCAN_DIR		0xC0
#define SET_COM_INVERSE_SCAN_DIR	0xC8

#define SET_LOW_COL_ADDR			0x00	//ORed 4-bit value
#define SET_HIGH_COL_ADDR			0x10	//ORed 4-bit value
#define SET_PAGE_START				0xB0	//ORed 6-bit value
#define SET_DISPLAY_START_LINE		0x40	//ORed 6-bit value

#define SET_CONTRAST				0x81
#define SET_MEMORY_MODE				0x20
#define SET_VCOM_DESELECT_LEVEL		0xDB
#define SET_CHARGE_PUMP_CONFIG		0x8D
#define SET_DISPLAY_OFFSET			0xD3
#define SET_MULTIPLEX_RATIO			0xA8
#define SET_COM_PIN_CONFIG			0xDA

#define SET_COLUMN_ADDR_STR_END		0x21
#define SET_PAGE_STR_END			0x22
#define SET_DIVIDER_OSC_FREQ		0xD5	//Divider - VAL[3:0]; Frequency VAL[7:4]
#define SET_PRE_CHARGE_PERIOD		0xD9	//Phase 1 - VAL[3:0]; Phase 2 - VAL[7:4]

#define HORIZONTAL_MEM_MODE			0x00
#define VERTICAL_MEM_MODE			0x01
#define PAGE_MEM_MODE				0x02
#define COM_PIN_SEQUENTIAL			0x02
#define COM_PIN_ALTERNATIVE			0x12
#define COM_PIN_ENABLE_LR_REMAP		0x22
#define ENA_CHARGE_PUMP				0x14

static const uint8_t ascii_bytes[] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // space
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// -
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	// .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x70, 0x00, 0x00,
	
	0x00, 0xF0, 0xF8, 0xF4, 0x0E, 0x0E, 0x0E, 0x0E,	0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0, 0x00,	// 0
	0x00, 0x7F, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x7F, 0x00,
	0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
	0x00, 0x0F, 0x1F, 0x2F, 0x70, 0x70, 0x70, 0x70,	0x70, 0x70, 0x70, 0x70, 0x2F, 0x1F, 0x0F, 0x00,

	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFE, 0xFC, 0x00, 0x00, // 1
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x7F, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x3F, 0x00, 0x00,

	0x00, 0x00, 0x00, 0x04, 0x0E, 0x0E, 0x0E, 0x0E,	0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0, 0x00, // 2
	0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xBF, 0x7F, 0x3F, 0x00,
	0x00, 0xFE, 0xFF, 0xFE, 0x01, 0x01, 0x01, 0x01,	0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x0F, 0x1F, 0x2F, 0x70, 0x70, 0x70, 0x70,	0x70, 0x70, 0x70, 0x70, 0x20, 0x00, 0x00, 0x00,

	0x00, 0x00, 0x00, 0x04, 0x0E, 0x0E, 0x0E, 0x0E,	0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0, 0x00, // 3
	0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x7F, 0xFF, 0x7F, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,	0x01, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
	0x00, 0x00, 0x00, 0x20, 0x70, 0x70, 0x70, 0x70,	0x70, 0x70, 0x70, 0x70, 0x2F, 0x1F, 0x0F, 0x00,

	0x00, 0xFC, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFE, 0xFC, 0x00, // 4
	0x00, 0x3F, 0x7F, 0xBF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x7F, 0xFF, 0x7F, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,	0x01, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x3F, 0x00,

	0x00, 0xF0, 0xF8, 0xF4, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0x00, 0x00, // 5
	0x00, 0x3F, 0x7F, 0xBF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFE, 0xFF, 0xFE, 0x00,
	0x00, 0x00, 0x20, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x2F, 0x1F, 0x0F, 0x00,

	0x00, 0xF0, 0xF8, 0xF4, 0x0E, 0x0E, 0x0E, 0x0E,	0x0E, 0x0E, 0x0E, 0x0E, 0x04, 0x00, 0x00, 0x00, // 6
	0x00, 0x7F, 0xFF, 0x7F, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00,
	0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x01, 0x01,	0x01, 0x01, 0x01, 0x01, 0xFE, 0xFF, 0xFE, 0x00,
	0x00, 0x0F, 0x1F, 0x2F, 0x70, 0x70, 0x70, 0x70,	0x70, 0x70, 0x70, 0x70, 0x2F, 0x1F, 0x0F, 0x00,

	0x00, 0x00, 0x04, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0, 0x00, // 7
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0x7F, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x3F, 0x00,

	0x00, 0xF0, 0xF8, 0xF4, 0x0E, 0x0E, 0x0E, 0x0E,	0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0, 0x00,	// 8
	0x00, 0x7F, 0xFF, 0x7F, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x7F, 0xFF, 0x7F, 0x00,
	0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x01, 0x01,	0x01, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
	0x00, 0x0F, 0x1F, 0x2F, 0x70, 0x70, 0x70, 0x70,	0x70, 0x70, 0x70, 0x70, 0x2F, 0x1F, 0x0F, 0x00,

	0x00, 0xF0, 0xF8, 0xF4, 0x0E, 0x0E, 0x0E, 0x0E,	0x0E, 0x0E, 0x0E, 0x0E, 0xF4, 0xF8, 0xF0, 0x00,	// 9
	0x00, 0x7F, 0xFF, 0x7F, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x7F, 0xFF, 0x7F, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFE, 0xFF, 0xFE, 0x00,
	0x00, 0x00, 0x20, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x2F, 0x1F, 0x0F, 0x00,
};

static const uint8_t init_cmds[] =
{	
	SET_DISPLAY_OFF,
	SET_SEGMENT_NO_REMAP,
	SET_COM_NORMAL_SCAN_DIR,
	SET_COM_PIN_CONFIG,				COM_PIN_SEQUENTIAL,
	SET_DISPLAY_START_LINE | 0x00,
	SET_PAGE_START | 0x00,
	SET_DIVIDER_OSC_FREQ,			0x80,
	SET_PRE_CHARGE_PERIOD,			0xF1,
	SET_MULTIPLEX_RATIO,			0x1F,
	SET_DISPLAY_OFFSET,				0x00,
	SET_CONTRAST,					0x8F,
	SET_VCOM_DESELECT_LEVEL,		0x40,
	SET_MEMORY_MODE,				HORIZONTAL_MEM_MODE,
	SET_DISPLAY_ON_YES_RAM,
	SET_NORMAL_DISPLAY,
	SET_CHARGE_PUMP_CONFIG,			ENA_CHARGE_PUMP,
	SET_DISPLAY_ON
};

static const uint8_t disp_cmds[] =
{	
	SET_COLUMN_ADDR_STR_END, 0x00, 0x7F,
	SET_PAGE_STR_END, 0x00, 0x03
};

struct oled
{
	uint8_t 	n_cols;
	uint8_t 	n_pages;	
	uint8_t		addr;

	i2c_inst_t*	i2c;
};

struct screen_segment
{
	uint8_t	col_start;
	uint8_t col_end;
	uint8_t page_start;
	uint8_t page_end;
};

static int	seg_size			(struct screen_segment* seg);
static void	send_cmd			(struct oled* screen, uint8_t cmd);
static void	send_cmds			(struct oled* screen, const uint8_t* cmds, int n);
static void	set_draw_segment	(struct oled* screen, struct screen_segment* seg);
static void	draw_segment		(struct oled* screen, struct screen_segment* seg, const uint8_t* buf);
static void	draw_char			(struct oled* screen, struct screen_segment* seg, char c);
static void	draw_string			(struct oled* screen, char* str, int len);
static void	clear_screen		(struct oled* screen);
static void	draw_screen			(struct oled* screen, const uint8_t* buf);

#endif